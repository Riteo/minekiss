#! /bin/sh
#
# minekiss - a shitty Minecraft launcher written entirely* in POSIX shell
# inspired from kiss.
#
# This is free and unencumbered software released into the public domain.
#
# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.
#
# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# For more information, please refer to <http://unlicense.org/>

# TODO: Make a version inherit everything from its parent when appropiate
# TODO: Validating -> Checking?
# TODO: More settings (eg. minekiss root, prompts etc)
# TODO: Properly manage missing accounts and invalid tokens
# TODO: Have an idea of what to do with multiple downloading instances
# TODO: Properly parse all library and jvm rules
# TODO: Add some more error handling
# TODO: Properly manage pre-1.6 assets
# TODO: Make the converted formats cleaner (tab separated?)
# TODO: Remove all platform-specific stuff, detect the current OS and set all rules properly.

# Bruh
export LC_ALL="C"

previous_stty="$(stty -g)"

abort() {
	stty "$previous_stty"
	printf "\n"

	error "Aborted."
}

cleanup() {
	if [ "$MINEKISS_DEBUG" = "" ]
	then
		is_directory_empty "$MINEKISS_TEMP_DIR" || info "Cleaning up..."

		rm -rf "$MINEKISS_TEMP_DIR"
	fi
}

error() {
	# This variable is intended to be parsed as a format string.
	# shellcheck disable=2059
	printf -- "$error_format"  "$1" >&2
	exit 1
}

info() {
	# This variable is intended to be parsed as a format string.
	# shellcheck disable=2059
	printf -- "$info_format" "$1"
}

warning() {
	# This variable is intended to be parsed as a format string.
	# shellcheck disable=2059
	printf -- "$warning_format" "$1" >&2
}

prompt() {
	# This variable is intended to be parsed as a format string.
	# shellcheck disable=2059
	printf "$prompt_format" "$1"

	# Not quoting the second argument allows leaving it empty without extra logic.
	# shellcheck disable=SC2086
	read -r $2
}

prompt_hidden() {
	# We don't want to write the password to the terminal.
	stty -echo

	# This variable is intended to be parsed as a format string.
	# shellcheck disable=2059
	printf "$prompt_format" "$1"

	# Not quoting the second argument allows leaving it empty without extra logic.
	# shellcheck disable=SC2086
	read -r $2

	stty echo
	printf "\n"
}

is_directory_empty() {
	# This implmentation avoids ls and passes shellcheck through globbing.
	directory_path="$1"
	set -- "$1"/*
	test "$*" = "$directory_path/*"
}

get_relative_resource_path() {
	printf "%s\n" "$(printf "%s" "$1" | head -c 2)/$1"
}

get_resource_url() {
	printf "%s\n" "$MINEKISS_RESOURCES_URL/$(get_relative_resource_path "$1")"
}

get_library_index_from_metadata_file() {
	# Format: [path] [sha1sum] [url]
	# Apparently we can avoid the whole "exclude" rule as it seems to do pretty
	# marginal stuff for now.
	jq -r ".libraries[]
	| select((has(\"rules\") | not) or .rules[0].action == \"allow\" and .rules[0].os.name != \"osx\")
	| .downloads.classifiers.\"natives-linux\" // .downloads.artifact // empty
	| \"$MINEKISS_LIBRARIES_DIR/\" + .path + \" \" + .url + \" \" +  .sha1"  "$1"

	# Maven library support
	 jq -r '.libraries[] | select(has("name") and has("url")) | .name + " " + .url' "$1" | while read -r package repo_url
	do
		relative_library_path="$(printf "%s" "$package" | {
			IFS=":" read -r namespace name version
			printf "%s\n" "$(printf "%s" "$namespace" | tr "." "/")/$name/$version/$name-$version.jar"
		})"

		local_library_path="$MINEKISS_LIBRARIES_DIR/$relative_library_path"
		remote_library_path="$repo_url/$relative_library_path"
		library_sha1="$(cat "$local_library_path.sha1" 2> /dev/null)"

		printf "%s\n" "$local_library_path $remote_library_path $library_sha1"
	done
}

get_unformatted_game_arguments_from_metadata_file() {
	jq -r 'if .arguments.game != null
		then .arguments.game[] | strings
		else .minecraftArguments // empty
		end' "$1" | tr "\n" " "
}

token_refresh() {
	curl -s -H "Content-Type: application/json" -d \
	"{
		\"accessToken\": \"$1\",
		\"clientToken\": \"$(cat "$userdata_dir/client_id")\"
	}" "$MINEKISS_AUTH_SERVER_URL/refresh" | jq -r "
		if has(\"accessToken\")
		then .accessToken
		else \"\" | halt_error(1)
		end"
	return
}

token_is_valid() {
	curl -s -f -H "Content-Type: application/json" -d \
	"{
		\"accessToken\":\"$1\",
		\"clientToken\":\"$(cat "$userdata_dir/client_id")\"
	}" "$MINEKISS_AUTH_SERVER_URL/validate"
}

token_invalidate() {
	curl -s -f -H "Content-Type: application/json" -d \
	"{
		\"accessToken\": \"$1\",
		\"clientToken\": \"$(cat "$userdata_dir/client_id")\"
	}" "$MINEKISS_AUTH_SERVER_URL/invalidate"
}

request_account_authentication() {
	curl -s --fail-with-body -H "Content-Type: application/json" -d @- "$MINEKISS_AUTH_SERVER_URL"/authenticate <<- EOF
	{
		"agent": {"name": "Minecraft",	"version": 1},
		"username": "$1",
		"password": "$2",
		"clientToken": "$(cat "$userdata_dir/client_id")"
	}
	EOF
}

# NOTE: This as of now just returns the only select profile (if any) as i'll
# still have to implement Microsoft login properly when it becomes more
# widespread. This will suffice for now.
#
# FORMAT: [ACCESS TOKEN] [PROFILE NAME] [PROFILE UUID]
parse_account_authentication_response() {
	jq -r \
	'if has("accessToken")
	then
		if has("selectedProfile")
		then .accessToken + " " + (.selectedProfile | .name + " " + .id )
		else "No Minecraft profile found." | halt_error(2)
		end
	else "Authentication failed: " + .errorMessage + "\n" | halt_error(1)
	end'
}

account_authenticate() {
	request_account_authentication "$1" "$2" | parse_account_authentication_response
}

account_write() {
	email_address="$1"
	auth_token="$2"
	profile_name="$3"
	profile_uuid="$4"

	account_dir="$userdata_dir/accounts/$email_address"

	umask 077
	mkdir -p "$account_dir/profiles"
	printf "%s\n" "$auth_token" > "$account_dir/auth_token"
	printf "%s\n" "$profile_name" > "$account_dir/profiles/$profile_uuid"
	printf "%s\n" "$profile_uuid" > "$account_dir/profiles/selected_uuid"
	printf "%s\n" "$email_address" > "$userdata_dir/selected_account"
}

account_login() {
	if [ ! "$1" ]
	then
		account="$(cat "$userdata_dir/selected_account")"
	else
		account="$1"
	fi

	if [ "$account" = "" ]
	then
		prompt "username:" account
		printf "%s\n" "$account" > "$userdata_dir/selected_account"
	fi

	password="$2"

	while true
	do
		prompt_hidden "Password for $account:" password
		account_authenticate "$account" "$password" | if read -r auth_token profile_name profile_uuid
		then account_write "$account" "$auth_token" "$profile_name" "$profile_uuid"
		else return 1 # We're inside a subshell due to the pipe
		fi && break
	done

	info "Authenticated successfully."
}

account_list() {
	is_directory_empty "$userdata_dir/accounts/" || printf "%s\n" "$userdata_dir/accounts/"*/ 2>/dev/null | while read -r account
	do
		info "$(basename "$account")"
	done
}

account_logout() {
	if [ "$1" ]
	then
		account="$1"
	else
		account="$(cat "$userdata_dir/selected_account")"
	fi

	account_path="$userdata_dir/accounts/$account"

	[ -d "$account_path" ] || error "Account not found."

	token_invalidate "$(cat "$account_path/auth_token")"
	rm -rf "$account_path"
}

account_select() {
	if [ "$1" ]
	then
		printf "%s\n" "$1" > "$userdata_dir/selected_account"
	else
		selected_account="$(cat "$userdata_dir/selected_account")"

		if [ "$selected_account" ]
		then
			info "Selected account: \"$selected_account\""
		else
			info "No default account selected."
		fi
	fi
}

parse_version_id() {
	version=${1:-latest}

	case "$version" in
		latest) version="$(jq -r '.latest.release' "$version_manifest_file")" ;;
		latest-snapshot) version="$(jq -r '.latest.snapshot' "$version_manifest_file")";;
	esac

	version_dir="$MINEKISS_VERSIONS_DIR/$version"
	version_client_file="$version_dir/$version.jar"
	version_metadata_file="$version_dir/$version.json"
	version_metadata_url="$(jq -r ".versions[] | select(.id == \"$version\").url" "$version_manifest_file")"
}

convert_version_metadata() {
	# This could surely be optimized into one single call and parsed with simpler
	# tools but it'll do for now.
	version_id="$(jq -r ".id // empty" "$1")"
	converted_version_path="$MINEKISS_TEMP_DIR/converted_versions/$version_id"

	if is_directory_empty "$converted_version_path"
	then
		mkdir -p "$converted_version_path"

		jq -r ".inheritsFrom // empty" "$1" > "$converted_version_path/inherits_from"
		jq -r ".downloads.client.url // empty" "$1" > "$converted_version_path/client_url"
		jq -r ".downloads.client.sha1 // empty" "$1" > "$converted_version_path/client_sha1"
		jq -r ".assetIndex.id // empty" "$1" > "$converted_version_path/assetindex_id"
		jq -r ".assetIndex.url // empty" "$1" > "$converted_version_path/assetindex_url"
		jq -r ".assetIndex.sha1 // empty" "$1" > "$converted_version_path/assetindex_sha1"
		printf "%s\n" "$MINEKISS_ASSETS_DIR/indexes/$(cat "$converted_version_path/assetindex_id").json" > "$converted_version_path/assetindex_path"
	fi

	printf "%s\n" "$converted_version_path"
}

fetch_latest_manifest() {
	info "Fetching the latest version manifest..."

	if ! curl -s --create-dirs "$MINEKISS_MANIFEST_URL" -o "$version_manifest_file"
	then
		if [ ! -f "$version_manifest_file" ]
		then
			error "Unable to fetch the version manifest file and no cached version found, aborting!"
		else
			warning "Unable to fetch the latest manifest! Offline mode enabled!"
			MINEKISS_OFFLINE=1
		fi
	fi
}

download() {
	MINEKISS_INTEGRITY=1

	parse_version_id "$1"

	if [ "$version_metadata_url" ]
	then
		# Metadata
		info "Validating $version's metadata..."

		# The SHA1 is for some reason only encoded into the version metadata path.
		# URL format: https://launchermeta.mojang.com/v1/packages/SHA/VERSION.json
		version_metadata_sha1="$(basename "$(dirname "$version_metadata_url")")"

		if ! printf "%s  %s\n" "$version_metadata_sha1" "$version_metadata_file" | sha1sum -c 1>/dev/null 2>&1
		then
			if [ ! "$MINEKISS_OFFLINE" ]
			then
				info "Downloading \"$(basename "$version_metadata_file")\"..."
				curl -s "$version_metadata_url" --create-dirs -o "$version_metadata_file"
			else
				if [ -f "$version_metadata_file" ]
				then
					warning "Integrity check for \"$(basename "$version_metadata_file")\" failed! Unable to download it due to missing internet connection."
					MINEKISS_INTEGRITY=0
				else
					error "Unable to download the version metadata file."
				fi
			fi
		fi
	fi

	[ -f "$version_metadata_file" ] || error "Version not found!"

	converted_metadata_path="$(convert_version_metadata "$version_metadata_file")"
	version_inherits="$(cat "$converted_metadata_path/inherits_from")"
	version_client_url="$(cat "$converted_metadata_path/client_url")"
	version_client_sha1="$(cat "$converted_metadata_path/client_sha1")"
	asset_index_id="$(cat "$converted_metadata_path/assetindex_id")"
	asset_index_url="$(cat "$converted_metadata_path/assetindex_url")"
	asset_index_sha1="$(cat "$converted_metadata_path/assetindex_sha1")"
	asset_index_file="$(cat "$converted_metadata_path/assetindex_path")"

	if [ "$version_inherits" ]
	then
		info "Validating parent version $version_inherits..."
		(download "$version_inherits")

		# Downloading will alredy have converted its metadata
		converted_inherited_version_metadata_path="$MINEKISS_TEMP_DIR/converted_versions/$version_inherits"

		inherited_version_path="$MINEKISS_VERSIONS_DIR/$version_inherits"
		inherited_version_asset_index_id="$(cat "$converted_inherited_version_metadata_path/assetindex_id")"
		inherited_version_asset_index_file="$(cat "$converted_inherited_version_metadata_path/assetindex_path")"

		mkdir -p "$version_dir/lib"
		ln -sf "$inherited_version_path/$version_inherits.jar" "$version_dir/$version.jar"
		ln -sf "$inherited_version_path"/lib/* "$version_dir/lib"
	fi

	if [ "$version_client_url" ] && [ "$version_client_sha1" ]
	then
		# Client
		info "Validating $version's client..."

		if ! printf "%s  %s\n" "$version_client_sha1" "$version_client_file" | sha1sum -c 1>/dev/null 2>&1
		then
			if [ "$MINEKISS_OFFLINE" = "" ]
			then
				info "Downloading \"$(basename "$version_client_file")\"..."
				curl -s --create-dirs "$version_client_url" -o "$version_client_file"
			else
				warning "Integrity check for \"$(basename "$asset_index_file")\" failed! Unable to download it due to missing internet connection."
				MINEKISS_INTEGRITY=0
			fi
		fi
	fi

	if [ "$asset_index_url" ] && [ "$asset_index_sha1" ] && [ "$asset_index_id" ]
	then
		# Asset index
		info "Validating $version's asset index..."

		if ! printf "%s  %s\n" "$asset_index_sha1" "$asset_index_file" | sha1sum -c 1>/dev/null 2>&1
		then
			if [ "$MINEKISS_OFFLINE" ]
			then
				warning "Integrity check for \"$(basename "$asset_index_file")\" failed! Unable to download it due to missing internet connection."
				MINEKISS_INTEGRITY=0
			else
				info "Downloading \"$(basename "$asset_index_file")\"..."

				curl -s "$asset_index_url" --create-dirs -o "$asset_index_file"
			fi
		fi

		if [ -f "$asset_index_file" ]
		then
			# TODO: Add support for the older asset indexes.
			info "Validating $asset_index_id's assets..."

			if [ "$asset_index_id" = "pre-1.6" ]
			then
				error "Pre 1.6 version detected! Download stopped as legacy asset managing is not supported yet."
			fi

			converted_asset_index="$MINEKISS_TEMP_DIR/converted_asset_index"
			failed_assets="$MINEKISS_TEMP_DIR/failed_assets"

			# Le epic conversion: [le hash] [le actual path] [le game path] [le asset url]
			# This allows us to use the shell's own word splitting as a blazingly fast line
			# by line "parser" for our intermediate format. Maybe we could use FIFOs but I
			# think that would just make things more complicated for nothing.
			jq -r ".virtual as \$virtual
			| .objects | to_entries[]
			| .value.hash
				+ \" \"
				+ (if \$virtual | not
					then
					\"$MINEKISS_ASSETS_DIR/objects/\" + .value.hash[0:2]+ \"/\" + .value.hash
					else
					\"$MINEKISS_ASSETS_DIR/virtual/$asset_index_id\" + \"/\" + .key
					end)
				+ \" \"	+ .key + \" \"
				+ \"$MINEKISS_RESOURCES_URL/\" + .value.hash[0:2] + \"/\" + .value.hash" "$asset_index_file" > "$converted_asset_index"

			awk '{print $1 "  " $2}' "$converted_asset_index" | sha1sum -c 2> /dev/null | grep -i failed | cut -d ":" -f 1 > "$failed_assets"

			# It's easier for now to read with unused variables. I might switch to
			# tab-separated files one day.
			# shellcheck disable=SC2034
			[ "$MINEKISS_OFFLINE" ] && grep -f "$failed_assets" "$converted_asset_index" | while read -r asset_sha1 asset_file_path asset_game_path asset_url
			do
				warning "Integrity check for \"$$asset_game_path\" failed! Unable to download it due to missing internet connection."
			done

			# We set MINEKISS_INTEGRITY only once if there are any broken assets.
			if grep -q . "$failed_assets"
			then
				[ "$MINEKISS_OFFLINE" ] && MINEKISS_INTEGRITY=0

				unique_asset_index="$MINEKISS_TEMP_DIR/unique_asset_index"
				# Apparently the asset index might contain some duplicates, so we remove them here.
				awk '!seen[$1]++' "$converted_asset_index" > "$unique_asset_index"

				grep -f "$failed_assets" "$unique_asset_index" \
				| awk '{print "url " $4 "\n" "output " $2 "\n"}' | curl --create-dirs -K - -s -w "%{url}\n" | while read -r url
				do
					info "Downloaded \"$(grep -F "$url" "$unique_asset_index" | awk '{print $3}')\"."
				done
			fi
		fi
	else
		[ -f "$inherited_version_asset_index_file" ] || warning "No asset index for version $version found!"
	fi

	# Libraries
	info "Validating $version's libraries..."

	converted_library_index="$MINEKISS_TEMP_DIR/converted_library_index"
	failed_libs="$MINEKISS_TEMP_DIR/failed_libs"

	get_library_index_from_metadata_file "$version_metadata_file" > "$converted_library_index"

	awk '{print $3 "  " $1}' "$converted_library_index" | sha1sum -c 2> /dev/null | grep FAILED | cut -d ":" -f 1 > "$failed_libs"

	# We look for clearly invalid checksums by looking at their length.
	awk '{if (length($3) != 40) print $1}' "$converted_library_index" >> "$failed_libs"

	# We set MINEKISS_INTEGRITY only once if there are any broken library files.
	if [ "$MINEKISS_OFFLINE" ] && grep -q . "$failed_libs"
	then
		MINEKISS_INTEGRITY=0
	fi

	# TODO: Avoid grep | awk
	grep -f "$failed_libs" "$converted_library_index" | awk '{print $1 "  " $2}' | while read -r library_file library_url
	do
		library_file_name="$(basename "$library_file")"

		if [ "$MINEKISS_OFFLINE" ]
		then
			warning "Integrity check for \"$library_file_name\" failed! Unable to download it due to missing internet connection."
			# We already set MINEKISS_INTEGRITY above.
			continue
		fi
		
		info "Downloading \"$library_file_name\"..."

		curl -s -f "$library_url" --create-dirs -o "$library_file"
		curl -s -f "$library_url.sha1" --create-dirs -o "$library_file.sha1"
	done

	info "Validating $version's native libraries..."

	mkdir -p "$version_dir/lib"
	grep "native" "$converted_library_index" | while read -r library_file library_sha1 library_url
	do
		library_file_name="$(basename "$library_file")"
		library_directory="$(dirname "$library_file")"

		mkdir -p "$library_directory/native"

		for native_library_file_name in $(zipinfo -1 "$library_file" -x 'META-INF/*' '*.git' '*.sha1' 2> /dev/null)
		do
			# We fetch the first matching element and work on that, otherwise any other
			# similarly named file might get stuck there forever.
			checksummed_native_library_file="$(printf "%s " "$library_directory/native/$native_library_file_name".* | cut -d " " -f 1)"
			checksummed_native_library_file_name="$(basename "$checksummed_native_library_file")"

			native_library_file="$library_directory/native/$native_library_file_name"
			native_library_file_sha1="${checksummed_native_library_file_name##*.}"
			native_library_file_current_sha1="$(sha1sum "$checksummed_native_library_file" 2> /dev/null | cut -d ' ' -f 1)"
			native_library_link="$version_dir/lib/$native_library_file_name"

			# We steer off a bit from the traditional native library management by
			# storing each decompressed library into a folder with its checksum
			# appended to its name. We then parse it to get its original checksum
			# and compare it.
			# Thanks to Dylan Araps for this great idea.
			if [ "$native_library_file_current_sha1" != "$native_library_file_sha1" ]
			then
				rm -f "$checksummed_native_library_file"
				info "Extracting \"$native_library_file_name\"..."

				(
					cd "$library_directory/native" || exit
					unzip -qqo "$library_file" "$native_library_file_name"
				)

				native_library_file_sha1="$(sha1sum "$native_library_file" 2> /dev/null | cut -d ' ' -f 1)"
				checksummed_native_library_file="$native_library_file.$native_library_file_sha1"
				mv "$native_library_file" "$checksummed_native_library_file"
			fi

			[ -f "$native_library_link" ] || ln -sf "$checksummed_native_library_file" "$native_library_link"
		done
	done
}

start_version() {
	parse_version_id "$1"

	# TODO: Maybe decide stuff with the dedicated status page? It'd be a mess to
	# support custom URLs though.
	if curl -s -f "$MINEKISS_AUTH_SERVER_URL" > /dev/null && [ ! "$MINEKISS_OFFLINE" ]
	then
		# TODO: Handle missing accounts.

		# Authentication
		selected_account="$(cat "$userdata_dir/selected_account")"
		selected_account_dir="$userdata_dir/accounts/$selected_account"
		selected_uuid="$(cat "$selected_account_dir/profiles/selected_uuid")"
		selected_username="$(cat "$selected_account_dir/profiles/$selected_uuid")"
		auth_token="$(cat "$selected_account_dir/auth_token")"

		if ! token_is_valid "$auth_token"
		then
			warning "Invalid auth token: access required."
			account_login "$selected_account"
		fi
	else
		# Ugh, there has to be a better way of doing this
		selected_account='""'
		selected_account_dir='""'
		selected_uuid='""'
		selected_username='""'

		warning "Unable to connect to the authentication server, offline mode enabled!"
		MINEKISS_OFFLINE=1
		prompt "Offline username:" selected_username
	fi

	download "$version"

	[ "$MINEKISS_INTEGRITY" = "0" ] && prompt "Validation failed, attempt running the game anyways? [Enter|^C]:" answer

	classpath="$(get_library_index_from_metadata_file "$version_metadata_file" | awk '{print $1}' | tr "\n" ":")"
	classpath="$classpath$version_client_file"

	version_main_class="$(jq -r ".mainClass" "$version_metadata_file")"

	# todo: find a way to manage stuff like resolution which is behind a rule.
	# todo: format all arguments.
	game_arguments="$(get_unformatted_game_arguments_from_metadata_file "$version_metadata_file")"

	if [ "$version_inherits" ]
	then
		classpath="$classpath:$(get_library_index_from_metadata_file "$inherited_version_path/$version_inherits.json" | awk '{print $1}' | tr "\n" ":")"
		asset_index_id="${asset_index_id:-$inherited_version_asset_index_id}"
		inherited_version_game_arguments="$(get_unformatted_game_arguments_from_metadata_file "$inherited_version_path/$version_inherits.json")"
		game_arguments="$inherited_version_game_arguments $game_arguments"
	fi

	# I have no idea how ${user_properties} is supposed to work
	game_arguments="$(printf "%s\n" "$game_arguments" | sed \
	-e "s|\${version_name}|$version|" \
	-e "s|\${assets_root}|$MINEKISS_ASSETS_DIR|" \
	-e "s|\${assets_index_name}|$asset_index_id|" \
	-e "s|\${version_type}|$(jq -r .type "$version_metadata_file")|" \
	-e "s|\${game_directory}|$MINEKISS_GAME_DIRECTORY|" \
	-e "s|\${user_properties}|{}|" \
	-e "s|\${auth_uuid}|$selected_uuid|" \
	-e "s|\${auth_access_token}|$auth_token|" \
	-e "s|\${auth_player_name}|$selected_username|")"

	# Legacy argument formatting for compatibility.
	game_arguments="$(printf "%s\n" "$game_arguments" \
	| sed "s|\${auth_session}|$auth_token|")"

	# Virtual assets support
	if jq -e .virtual "$MINEKISS_ASSETS_DIR/indexes/$asset_index_id.json" > /dev/null
	then
		game_arguments="$(printf "%s\n" "$game_arguments" \
		| sed "s|\${game_assets}|$MINEKISS_ASSETS_DIR/virtual/$asset_index_id|")"
	fi

	if [ "$JAVA_HOME" ]
	then
		java="$JAVA_HOME/bin/java"
	else
		java="java"
	fi

	# TODO: Read metadata from the instance to choose the right Java version.
	# TODO: Format the JVM's arguments.
	#
	# We need word splitting because the arguments are dynamically specified
	# in the version manifest.
	# shellcheck disable=SC2086
	"$java" -Djava.library.path="$MINEKISS_VERSIONS_DIR/$version/lib" -cp "$classpath" $version_main_class $game_arguments
}

list_versions() {
	# Printing with the format itself allows us to avoid a whole subshell.
	#
	# info_format is intended to be parsed as a format string.
	# shellcheck disable=2059
	is_directory_empty "$MINEKISS_VERSIONS_DIR" || printf -- "$info_format" "$MINEKISS_VERSIONS_DIR"/*
}

# Configuration

XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"

userdata_dir="$XDG_DATA_HOME/minekiss"

MINEKISS_MANIFEST_URL="${MINEKISS_MANIFEST_URL:-"https://launchermeta.mojang.com/mc/game/version_manifest.json"}"
MINEKISS_RESOURCES_URL="${MINEKISS_RESOURCES_URL:-"https://resources.download.minecraft.net"}"
MINEKISS_AUTH_SERVER_URL="${MINEKISS_AUTH_SERVER_URL:-"https://authserver.mojang.com"}"
MINEKISS_ASSETS_DIR="${MINEKISS_ASSETS_DIR:-"$userdata_dir/assets"}"
MINEKISS_LIBRARIES_DIR="${MINEKISS_LIBRARIES_DIR:-"$userdata_dir/libraries"}"
MINEKISS_VERSIONS_DIR="${MINEKISS_VERSIONS_DIR:-"$userdata_dir/versions"}"
MINEKISS_GAME_DIRECTORY="${MINEKISS_GAME_DIRECTORY:-"."}"
MINEKISS_TEMP_DIR="${MINEKISS_TEMP_DIR:-"/tmp/minekiss"}/$$"

version_manifest_file="$userdata_dir/version_manifest.json"

mkdir -p "$MINEKISS_TEMP_DIR"
mkdir -p "$userdata_dir"

[ -f "$userdata_dir/client_id" ] || (umask 077; uuidgen > "$userdata_dir/client_id")

[ -f "$userdata_dir/selected_account" ] || "$userdata_dir/selected_account"

if [ -t 1 ]
then
	bold_modifier="$(tput bold)"
	red_color="$(tput setaf 1)"
	green_color="$(tput setaf 2)"
	yellow_color="$(tput setaf 3)"
	reset_color="$(tput sgr0)"

	if [ "$KISS_STYLE" ]
	then
		error_format="$bold_modifier$yellow_color"ERROR"$reset_color"' %s\n'
		warning_format="$bold_modifier$yellow_color"WARNING"$reset_color"' %s\n'
		info_format="$bold_modifier$yellow_color->$reset_color"' %s\n'
		prompt_format='%s '
	else
		error_format="$bold_modifier$red_color"XX"$reset_color"' %s\n'
		warning_format="$bold_modifier$yellow_color"!!"$reset_color"' %s\n'
		info_format="$bold_modifier$green_color->$reset_color"' %s\n'
		prompt_format="$bold_modifier$green_color<-$reset_color"' %s '
	fi
else
	error_format="%s\n"
	warning_format="%s\n"
	info_format="%s\n"
	prompt_format="%s\n"
fi



trap abort INT
trap cleanup EXIT

case $1 in
	download | d) fetch_latest_manifest && download "$2"; exit ;;
	start | s) fetch_latest_manifest && start_version "$2"; exit ;;
	versions | v) list_versions; exit ;;

	authenticate | a) account_login "$2"; exit ;;
	logout | l) account_logout "$2"; exit ;;
	select | se) account_select "$2" ; exit ;;
	accounts | ac) account_list; exit ;;
esac

if [ "$1" ]
then
	error "Unrecognized command."
else
	executable_name="$(basename "$0")"
	info "$executable_name [d|s|v] [version]"
	info "download Verify and download a Minecraft version into the cache directory"
	info "start    Start a Minecraft version into the current directory"
	info "versions List all currently downloaded versions"
	info
	info "$executable_name [a|l|se|ac] [account]"
	info "authenticate Authenticate or refresh an account"
	info "logout       Log out off an account"
	info "select       Select an account as the default"
	info "accounts     List all available accounts"
fi
exit 0
