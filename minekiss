#! /bin/sh -e

# TODO: Add a subcommand where to put all of this
# TODO: Add some primitive instance metadata reading
# TODO: Add some proper way of reading the instance classpath
# TODO: Add a newinstance command
# TODO: Refactor everything

get_resource_url() {
	printf "$RESOURCES_URL/$(printf "%s" "$1" | head -c 2)/$1"
}

get_relative_resource_path() {
 printf "$(printf "%s" "$1" | head -c 2)/$1"
}

error() {
	printf "$1\n"
	exit 1
}

if [ "$1" == "" ]
then
	error "Missing version id."
fi

SELECTED_VERSION="$1"

# Configuration

if [ "$VERSION_MANIFEST_URL" == "" ]
then
	VERSION_MANIFEST_URL="https://launchermeta.mojang.com/mc/game/version_manifest.json"
fi

if [ "$RESOURCE_URL" == "" ]
then
	RESOURCES_URL="http://resources.download.minecraft.net"
fi

if [ "$XDG_CACHE_HOME" == "" ]
then
	XDG_CACHE_HOME="$HOME/.cache"
fi

CACHE_DIR="$XDG_CACHE_HOME/minekiss"

if [ "$ASSETS_DIR" == "" ]
then
	ASSETS_DIR="$CACHE_DIR/assets"
fi

if [ "$LIBRARIES_DIR" == "" ]
then
	LIBRARIES_DIR="$CACHE_DIR/libraries"
fi

if [ "$VERSIONS_DIR" == "" ]
then
	VERSIONS_DIR="$CACHE_DIR/versions"
fi

if [ "$TEMP_DIR" == "" ]
then
	TEMP_DIR="/tmp/minekiss"
fi

VERSION_CLIENT_FILE="$VERSIONS_DIR/$SELECTED_VERSION/$SELECTED_VERSION.jar"
VERSION_METADATA_FILE="$VERSIONS_DIR/$SELECTED_VERSION/$SELECTED_VERSION.json"

# Game downloading
VERSION_MANIFEST_FILE="$CACHE_DIR/version_manifest.json"
ASSET_INDEX_FILE="$ASSETS_DIR/indexes/$SELECTED_VERSION.json"

printf "Fetching the version manifest...\n"
mkdir -p "$(dirname "$VERSION_MANIFEST_FILE")"
curl -s "$VERSION_MANIFEST_URL" > "$VERSION_MANIFEST_FILE"

if [ "$?" != 0 ] 
then
	# TODO: Implement an offline mode.
	error "Unable to fetch the manifest."
fi


VERSION_METADATA_URL="$(jq -r ".versions[] | select(.id == \"$SELECTED_VERSION\").url" < "$VERSION_MANIFEST_FILE")"

if [ -f "$VERSION_METADATA_FILE" ] && [ "$VERSION_METADATA_URL" != "" ]
then
	printf "Validating the current version matadata...\n"

	# The SHA1 is for some reason only encoded into the version metadata path.
	# URL format: https://launchermeta.mojang.com/v1/packages/SHA/VERSION.json
	VERSION_METADATA_SHA1="$(basename "$(dirname "$VERSION_METADATA_URL")")"

	# sha1sum returns the name of the file alongside the actual SHA1
	VERSION_METADATA_CURRENT_SHA1="$(sha1sum "$VERSION_METADATA_FILE" | cut -d " " -f 1)"

	if [ "$VERSION_METADATA_CURRENT_SHA1" != $VERSION_METADATA_SHA1 ]
	then
		printf "Validation failed! Redownloading...\n"
		curl -s "$VERSION_METADATA_URL" > "$VERSION_METADATA_FILE"
	fi
else
	if [ "$VERSION_METADATA_URL" == "" ]
	then
		printf "Invalid version id.\n"
		exit 1
	fi

	printf "Fetching the version metadata file...\n"
	mkdir -p "$(dirname "$VERSION_METADATA_FILE")"
	curl -s "$VERSION_METADATA_URL" > "$VERSION_METADATA_FILE"
fi

VERSION_CLIENT_URL="$(jq -r ".downloads.client.url" < "$VERSION_METADATA_FILE")"

if [ -f "$VERSION_CLIENT_FILE" ]
then
	printf "Validating the client jar...\n"

	VERSION_CLIENT_SHA1="$(jq -r ".downloads.client.sha1" < "$VERSION_METADATA_FILE")"

	# sha1sum returns the name of the file alongside the actual SHA1
	VERSION_CLIENT_CURRENT_SHA1="$(sha1sum "$VERSION_CLIENT_FILE" | cut -d " " -f 1)"

	if [ "$VERSION_CLIENT_CURRENT_SHA1" != "$VERSION_CLIENT_SHA1" ]
	then
		printf "Validation failed! Redownloading...\n"
		curl -s "$VERSION_CLIENT_URL" > "$VERSION_CLIENT_FILE"
	fi
else
	printf "Downloading the client jar...\n"
	curl -s "$VERSION_CLIENT_URL" > "$VERSION_CLIENT_FILE"
fi

ASSET_INDEX_URL="$(jq -r ".assetIndex.url" < "$VERSION_METADATA_FILE")"

if [ -f "$ASSET_INDEX_FILE" ]
then
	printf "Validating the game's asset index...\n"

	ASSET_INDEX_SHA1="$(jq -r ".assetIndex.sha1" < "$VERSION_METADATA_FILE")"

	# sha1sum returns the name of the file alongside the actual SHA1
	ASSET_INDEX_CURRENT_SHA1="$(sha1sum "$ASSET_INDEX_FILE" | cut -d " " -f 1)"
	if [ "$ASSET_INDEX_CURRENT_SHA1" != "$ASSET_INDEX_SHA1" ]
	then
		printf "Validation failed! Redownloading...\n"
		curl -s "$ASSET_INDEX_URL" > "$ASSET_INDEX_FILE"
	fi
else
	printf "Downloading the game's asset index...\n"

	mkdir -p "$(dirname $ASSET_INDEX_FILE)"
	curl -s "$ASSET_INDEX_URL" > "$ASSET_INDEX_FILE"

	if [ "$?" != 0 ]
	then
		# TODO: Implement an offline mode.
		error "Unable to fetch the game's asset index."
	fi
fi

printf "Validating the game's assets...\n"

jq -r ".objects | keys[]" < "$ASSET_INDEX_FILE" | while read -r ASSET_GAME_PATH
do
	ASSET_SHA1="$(jq -r ".objects.\"$ASSET_GAME_PATH\".hash" < "$ASSET_INDEX_FILE")"
	ASSET_FILE="$ASSETS_DIR/objects/$(get_relative_resource_path "$ASSET_SHA1")"

	if [ -f "$ASSET_FILE" ]
	then
		ASSET_CURRENT_SHA1="$(sha1sum "$ASSET_FILE" | cut -d " " -f 1)"

		printf "Validating \"%s\"...\n" "$ASSET_GAME_PATH"

		if [ "$ASSET_CURRENT_SHA1" != "$ASSET_SHA1" ]
		then
			printf "Redownloading \"%s\"...\n" "$ASSET_GAME_PATH"
			mkdir -p "$(dirname "$ASSET_FILE")"
			curl -s "$RESOURCES_URL/$(get_relative_resource_path "$ASSET_SHA1")" > "$ASSET_FILE"
		fi
	else
		printf "Downloading \"$ASSET_GAME_PATH\"...\n"
		mkdir -p "$(dirname "$ASSET_FILE")"
		curl -s "$RESOURCES_URL/$(get_relative_resource_path "$ASSET_SHA1")" > "$ASSET_FILE"
	fi
done

printf "Validating the game's libraries...\n"

# Here the -c flag is important since we want to parse a line as an object.
# Also, how the fuck do I split this.
jq -rc ".libraries[] | select((has(\"rules\") | not) or .rules[0].action == \"allow\" and .rules[0].os.name != \"osx\") | if .natives.linux != null then .downloads.classifiers.\"natives-linux\", .downloads.artifact else .downloads.artifact end" < "$VERSION_METADATA_FILE" | while read -r ARTIFACT_OBJECT
do
	LIBRARY_RELATIVE_PATH="$(printf "%s" "$ARTIFACT_OBJECT" | jq -r ".path")"
	LIBRARY_SHA1="$(printf "%s" "$ARTIFACT_OBJECT" | jq -r ".sha1")"

	LIBRARY_FILE_NAME="$(basename "$LIBRARY_RELATIVE_PATH")"

	LIBRARY_FILE="$LIBRARIES_DIR/$LIBRARY_RELATIVE_PATH"
	mkdir -p "$(dirname "$LIBRARY_FILE")"

	LIBRARY_URL="$(printf "%s" "$ARTIFACT_OBJECT" | jq -r ".url")"

	if [ -f "$LIBRARIES_DIR/LIBRARY_RELATIVE_PATH" ]
	then
		printf "Validating \"%s\"...\n" "$LIBRARY_FILE_NAME"

		LIBRARY_CURRENT_SHA1="$(sha1sum "$LIBRARY_FILE" | cut -d " " -f 1)"

		if [ "$LIBRARY_CURRENT_SHA1" != "$LIBRARY_SHA1" ]
		then
			printf "Redownloading \"%s\"...\n" "$LIBRARY_FILE_NAME"
			curl -s "$LIBRARY_URL" > "$LIBRARY_FILE"
		fi
	else
		printf "Downloading \"%s\"...\n" "$LIBRARY_FILE_NAME"
		curl -s "$LIBRARY_URL" > "$LIBRARY_FILE"
	fi
done
